size가 100일때 root100(=10)이 넘는 11이상인 수의 배수는 이미 전에 지워졌으므로 계산할 필요가 없다. 
(11*2는 2의 배수에서 지워졌고 11*3은 3의 배수에서 지워졌다. 그리고 11*10부턴 100초과니까 계산하지 않는다.

-----Using Sieve of Eratosthenes
#include <iostream>
#include <math.h>

char notPrime[10001]; // 2부터 10000까지 하기 위해
// isPrime으로 하면 : 먼저 배열의 모든 element를 true로 초기화해야 함

void sieve(int max) {
    for (int i = 2; i <= sqrt(max); i++) {
        if (notPrime[i] == true) 
	continue; // If i has been removed because it's not a prime number, the multiples of i has already been removed earlier, so continue;
        for (int j = 2; j <= max / i; j++)
            notPrime[i * j] = true;
    }
}

void goldbachs_conjecture(int n) //2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다.
{
    if (!(n > 2) || n % 2 != 0) //n>2이 아니거나 짝수가 아니면
    {
        printf("n is not over 2 or it's not an even number");
        return;
    }
    for (int i = 2; i <= (n / 2); i++)
    {
        if (notPrime[i] == 1) 
            continue; //소수가 아니면 continue
        for (int j = 2; j <= (n - i); j++)
        {
            if (notPrime[j] == 1) 
                continue; //소수가 아니면 continue
            if (i + j == n)
                printf("%d + %d = %d\n", i, j, n); //goldbach수 이면 출력
        }
    }
}

int main()
{
    sieve(10000);
    int n;
    printf("Input\n");
    scanf("%d", &n);
    goldbachs_conjecture(n);
    return 0;
}
-----노가다
#include <stdio.h>

char isPrime(int n) 
{
    for (int i = 2; i <= n - 2; i++)
    {
        if(n%i==0) return 0;
        else return 1;
    }
}

void Goldbachs_conjecture(int n)
{
    if(n<4||n%2!=0) //n<4 이거나 짝수가 아니면
    {
        printf("error");
        return;
    }
    for(int i=2; i<=n/2; i++) 
    {
        if(isPrime(i)==0) continue; //소수가 아니면 continue
        for(int j=2; j<=n-i; j++)
        {
            if(isPrime(i)==0) continue; //소수가 아니면 continue
            if(isPrime(j)==0) continue;
            if(i+j!=n) continue; //goldbach수가 아니면 continue
            else printf("%d + %d = %d\n",i,j,n); //goldbach 수면 출력  
        }
    }
}

int main()
{
    int n;
    printf("Input\n");
    scanf("%d", &n);
    Goldbachs_conjecture(n);
    return 0;
}