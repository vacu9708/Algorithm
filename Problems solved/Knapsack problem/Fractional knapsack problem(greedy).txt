#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Value_per_weight {
public:
	double value_per_weight;
	short original_index;

	bool operator>(Value_per_weight a) {
		return value_per_weight > a.value_per_weight;
	}
};

const short number_of_items = 5;
vector<double> item_weights = { 12, 1, 4, 1, 2 };
vector<double> item_values = { 4, 2, 10, 1, 2 };
vector<Value_per_weight> values_per_weight(number_of_items);
vector<short> items_in_bag(number_of_items); // kg

void print_result() {
	int total_weight = 0;
	cout << "A B C D E\n";
	for (int i = 0; i < number_of_items; i++) {
		cout << items_in_bag[i] << " ";
		total_weight += items_in_bag[values_per_weight[i].original_index] * values_per_weight[i].value_per_weight;
	}
	cout << "\nTotal weight : " << total_weight;
}

void knapsack_greedy() {
	int sum_of_weights = 0, max_weight = 15;

	// Calculate value per weight and sort so that items with higher value per weight is in front
	for (int i = 0; i < number_of_items; i++) {
		values_per_weight[i].value_per_weight = item_values[i] / item_weights[i];
		values_per_weight[i].original_index = i;
	}
	sort(values_per_weight.begin(), values_per_weight.end(), [](Value_per_weight a, Value_per_weight b) {return a > b;});
	//------
	// Put items (that have been sorted in order of higher value per weight) in bag
	for (int i = 0; i < number_of_items; i++)
		while (items_in_bag[values_per_weight[i].original_index] + 1 <= item_weights[values_per_weight[i].original_index] && sum_of_weights + 1 <= max_weight) {
			items_in_bag[values_per_weight[i].original_index]++;
			sum_of_weights++;
		}
	//-----
	print_result();
}

int main() {
	knapsack_greedy();
}