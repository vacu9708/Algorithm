#include <iostream>
#include <list>
#include <string>
using namespace std;
#define BUFFER_LENGTH 1111

void sum_of_big_numbers(string num1, string num2) {
	// Put numbers into buffers in order to calculate
	char buffer1[BUFFER_LENGTH], buffer2[BUFFER_LENGTH];
	int number1_index = num1.length() - 1, buffer1_index = sizeof(buffer1) - 1;
	while (number1_index >= 0)
		buffer1[buffer1_index--] = num1[number1_index--];
	int number2_index = num2.length() - 1, buffer2_index = sizeof(buffer2) - 1;
	while (number2_index >= 0)
		buffer2[buffer2_index--] = num2[number2_index--];

	// Calculate
	int calculation_index = sizeof(buffer1) - 1, sum_of_a_digit = 0, carry = 0;
	char total_sum[1111];
	while (calculation_index > buffer1_index || calculation_index > buffer2_index) {
		sum_of_a_digit = (buffer1[calculation_index] - '0') + (buffer2[calculation_index] - '0'); // minus '0' equals atoi
		total_sum[calculation_index--] = (sum_of_a_digit % 10 + carry) + '0'; // plus '0' equals int to ASCII;
		carry = sum_of_a_digit / 10;
	}
	if (carry != 0)
		total_sum[calculation_index--] = carry + '0';

	// Print
	cout << num1 << " + " << num2 << " = ";
	while (calculation_index < sizeof(total_sum) - 1)
		cout << total_sum[++calculation_index];
}

int main() {
	sum_of_big_numbers("456", "789");
}

-----Shorter using array (It doesn't work)
#include <iostream>
#include <list>
#include <string>
using namespace std;
#define BUFFER_LENGTH 1111

void sum_of_big_numbers(string num1, string num2) {
	// Put numbers into buffers in order to calculate
	char buffer[2][BUFFER_LENGTH];
	string num[2]{ num1, num2 };
	int number_index[2] = { num[0].length() - 1, num[1].length() - 1 }, buffer_index[2] = { sizeof(buffer[0]) - 1, sizeof(buffer[1]) - 1 };
	for (int i = 0; i < 2; i++)
		while (number_index[i] >= 0)
			buffer[i][buffer_index[i]--] = num[i][number_index[i]--];

	// Calculate;
	int calculation_index = sizeof(BUFFER_LENGTH) - 1, sum_of_a_digit = 0, carry = 0;
	char total_sum[1111];
	while (calculation_index > buffer_index[0] || calculation_index > buffer_index[1]) {
		sum_of_a_digit = (buffer[0][calculation_index] - '0') + (buffer[1][calculation_index] - '0'); // minus '0' equals atoi
		total_sum[calculation_index--] = (sum_of_a_digit % 10 + carry) + '0'; // plus '0' equals int to ASCII;
		carry = sum_of_a_digit / 10;
	}
	if (carry != 0)
		total_sum[calculation_index--] = carry + '0';

	// Print
	cout << num1 << " + " << num2 << " = ";
	while (calculation_index < sizeof(total_sum) - 1)
		cout << total_sum[++calculation_index];
}

int main() {
	sum_of_big_numbers("456", "789");
}
