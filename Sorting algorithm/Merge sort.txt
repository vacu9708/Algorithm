#include <iostream>
using namespace std;

void sort_and_merge(int* arr, int* temp, int left, int mid, int right) {
	int i = left, j = mid + 1, temp_index = left;
	// Sort elements in ascending order 
	while (i <= mid && j <= right) {
		if (arr[i] < arr[j])
			temp[temp_index++] = arr[i++];
		else if (arr[j] < arr[i])
			temp[temp_index++] = arr[j++];
	}
	// Pick up the remaining elements and put them in temp
	while (i <= mid) // Copy the remaining elements of first half, if there are any
		temp[temp_index++] = arr[i++];
	while (j <= right) // Copy the remaining elements of second half, if there are any
		temp[temp_index++] = arr[j++];
	for (int t = left; t <= right; t++) // Copy temp arr to original arr
		arr[t] = temp[t];
}

void merge_sort(int* arr, int* temp, int left, int right) {
	if (left < right) { // While the length is not 1 (base case of recursion)
		int mid = (left + right) / 2;
		merge_sort(arr, temp, left, mid);
		merge_sort(arr, temp, mid + 1, right);
		sort_and_merge(arr, temp, left, mid, right);
	}
}

int main(void) {
	int arr[] = { 8,7,6,5,4,3,2,1 };
	int length = sizeof(arr) / sizeof(int);
	int* temp = new int[length]; // Without a temp, merge sort is impossible.
	merge_sort(arr, temp, 0, length - 1);
	for (int i = 0; i < length; i++)
		cout << arr[i] << " ";
}